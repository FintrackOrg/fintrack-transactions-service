/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter output_javascript,optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "google/type/datetime.proto" (package "google.type", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter output_javascript,optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "google/type/datetime.proto" (package "google.type", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { PbLong } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../protobuf/duration_pb";
// @generated message type with reflection information, may provide speed optimized methods
class DateTime$Type extends MessageType {
    constructor() {
        super("google.type.DateTime", [
            { no: 1, name: "year", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "month", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "day", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "hours", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "minutes", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "seconds", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "nanos", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "utc_offset", kind: "message", oneof: "timeOffset", T: () => Duration },
            { no: 9, name: "time_zone", kind: "message", oneof: "timeOffset", T: () => TimeZone }
        ]);
    }
    /**
     * Creates `DateTime` for the current time.
     */
    now() {
        return this.fromJsDate(new globalThis.Date());
    }
    /**
     * Creates a javascript Date object from the message.
     *
     * If a the message has a UTC offset, the javascript Date is converted
     * into your local time zone, because javascript Dates are always in the
     * local time zone.
     *
     * If the message has an offset given as an IANA timezone id, an error is
     * thrown, because javascript has no on-board support for IANA time zone
     * ids.
     */
    toJsDate(message) {
        let dt = new globalThis.Date(message.year, message.month - 1, message.day, message.hours, message.minutes, message.seconds, message.nanos / 1000), to = message.timeOffset;
        if (to) {
            if (to.oneofKind === "timeZone")
                throw new globalThis.Error("IANA time zone not supported");
            if (to.oneofKind === "utcOffset") {
                let s = PbLong.from(to.utcOffset.seconds).toNumber();
                dt = new globalThis.Date(dt.getTime() - (s * 1000));
            }
        }
        return dt;
    }
    /**
     * Creates a Date message from a javascript Date object.
     *
     * Values are in local time and a proper UTF offset is provided.
     */
    fromJsDate(date) {
        return {
            year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate(), hours: date.getHours(), minutes: date.getMinutes(), seconds: date.getSeconds(), nanos: date.getMilliseconds() * 1000, timeOffset: {
                oneofKind: "utcOffset", utcOffset: {
                    seconds: PbLong.from(date.getTimezoneOffset() * 60).toString(), nanos: 0,
                }
            }
        };
    }
}
/**
 * @generated MessageType for protobuf message google.type.DateTime
 */
export const DateTime = new DateTime$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeZone$Type extends MessageType {
    constructor() {
        super("google.type.TimeZone", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message google.type.TimeZone
 */
export const TimeZone = new TimeZone$Type();
