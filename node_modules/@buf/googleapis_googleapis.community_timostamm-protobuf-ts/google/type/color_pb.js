/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter output_javascript,optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "google/type/color.proto" (package "google.type", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter output_javascript,optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "google/type/color.proto" (package "google.type", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { MessageType } from "@protobuf-ts/runtime";
import { FloatValue } from "../protobuf/wrappers_pb";
// @generated message type with reflection information, may provide speed optimized methods
class Color$Type extends MessageType {
    constructor() {
        super("google.type.Color", [
            { no: 1, name: "red", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "green", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "blue", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "alpha", kind: "message", T: () => FloatValue }
        ]);
    }
    /**
     * Returns hexadecimal notation of the color: #RRGGBB[AA]
     *
     * R (red), G (green), B (blue), and A (alpha) are hexadecimal characters
     * (0–9, A–F). A is optional. For example, #ff0000 is equivalent to
     * #ff0000ff.
     *
     * See https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#RGB_colors
     */
    toHex(message) {
        let hex = [
            message.red.toString(16), message.green.toString(16), message.blue.toString(16),
        ];
        if (message.alpha) {
            let alpha = Math.max(Math.min(message.alpha.value, 1), 0);
            hex.push(Math.round(alpha * 255).toString(16));
        }
        return "#" + hex.map(i => i.length < 2 ? "0" + i : i).join("");
    }
    /**
     * Parses a hexadecimal color notation.
     *
     * Recognizes the following forms:
     * - three-digit  (#RGB)
     * - six-digit (#RRGGBB)
     * - four-digit  (#RGBA)
     * - eight-digit (#RRGGBBAA)
     */
    fromHex(hex) {
        if (/^#(?:[0-9a-fA-F]{3}){1}$/.test(hex)) {
            return {
                red: parseInt(hex.substring(1, 2) + hex.substring(1, 2), 16), green: parseInt(hex.substring(2, 3) + hex.substring(2, 3), 16), blue: parseInt(hex.substring(3, 4) + hex.substring(3, 4), 16),
            };
        }
        else if (/^#(?:[0-9a-fA-F]{3}){2}$/.test(hex)) {
            return {
                red: parseInt(hex.substring(1, 3), 16), green: parseInt(hex.substring(3, 5), 16), blue: parseInt(hex.substring(5, 7), 16),
            };
        }
        else if (/^#(?:[0-9a-fA-F]{4}){1}$/.test(hex)) {
            return {
                red: parseInt(hex.substring(1, 2) + hex.substring(1, 2), 16), green: parseInt(hex.substring(2, 3) + hex.substring(2, 3), 16), blue: parseInt(hex.substring(3, 4) + hex.substring(3, 4), 16), alpha: {
                    value: parseInt(hex.substring(4, 5) + hex.substring(4, 5), 16) / 255,
                }
            };
        }
        else if (/^#(?:[0-9a-fA-F]{4}){2}$/.test(hex)) {
            return {
                red: parseInt(hex.substring(1, 3), 16), green: parseInt(hex.substring(3, 5), 16), blue: parseInt(hex.substring(5, 7), 16), alpha: {
                    value: parseInt(hex.substring(7, 9), 16) / 255,
                }
            };
        }
        throw new Error("invalid hex color");
    }
}
/**
 * @generated MessageType for protobuf message google.type.Color
 */
export const Color = new Color$Type();
