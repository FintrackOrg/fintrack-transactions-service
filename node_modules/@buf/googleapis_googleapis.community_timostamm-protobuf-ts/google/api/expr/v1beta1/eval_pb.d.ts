/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter output_javascript,optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "google/api/expr/v1beta1/eval.proto" (package "google.api.expr.v1beta1", syntax proto3)
// tslint:disable
// @ts-nocheck
//
// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
import { MessageType } from "@protobuf-ts/runtime";
import { Status } from "../../../rpc/status_pb";
import { Value } from "./value_pb";
/**
 * The state of an evaluation.
 *
 * Can represent an initial, partial, or completed state of evaluation.
 *
 * @generated from protobuf message google.api.expr.v1beta1.EvalState
 */
export interface EvalState {
    /**
     * The unique values referenced in this message.
     *
     * @generated from protobuf field: repeated google.api.expr.v1beta1.ExprValue values = 1;
     */
    values: ExprValue[];
    /**
     * An ordered list of results.
     *
     * Tracks the flow of evaluation through the expression.
     * May be sparse.
     *
     * @generated from protobuf field: repeated google.api.expr.v1beta1.EvalState.Result results = 3;
     */
    results: EvalState_Result[];
}
/**
 * A single evaluation result.
 *
 * @generated from protobuf message google.api.expr.v1beta1.EvalState.Result
 */
export interface EvalState_Result {
    /**
     * The expression this result is for.
     *
     * @generated from protobuf field: google.api.expr.v1beta1.IdRef expr = 1;
     */
    expr?: IdRef;
    /**
     * The index in `values` of the resulting value.
     *
     * @generated from protobuf field: int32 value = 2;
     */
    value: number;
}
/**
 * The value of an evaluated expression.
 *
 * @generated from protobuf message google.api.expr.v1beta1.ExprValue
 */
export interface ExprValue {
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "value";
        /**
         * A concrete value.
         *
         * @generated from protobuf field: google.api.expr.v1beta1.Value value = 1;
         */
        value: Value;
    } | {
        oneofKind: "error";
        /**
         * The set of errors in the critical path of evalution.
         *
         * Only errors in the critical path are included. For example,
         * `(<error1> || true) && <error2>` will only result in `<error2>`,
         * while `<error1> || <error2>` will result in both `<error1>` and
         * `<error2>`.
         *
         * Errors cause by the presence of other errors are not included in the
         * set. For example `<error1>.foo`, `foo(<error1>)`, and `<error1> + 1` will
         * only result in `<error1>`.
         *
         * Multiple errors *might* be included when evaluation could result
         * in different errors. For example `<error1> + <error2>` and
         * `foo(<error1>, <error2>)` may result in `<error1>`, `<error2>` or both.
         * The exact subset of errors included for this case is unspecified and
         * depends on the implementation details of the evaluator.
         *
         * @generated from protobuf field: google.api.expr.v1beta1.ErrorSet error = 2;
         */
        error: ErrorSet;
    } | {
        oneofKind: "unknown";
        /**
         * The set of unknowns in the critical path of evaluation.
         *
         * Unknown behaves identically to Error with regards to propagation.
         * Specifically, only unknowns in the critical path are included, unknowns
         * caused by the presence of other unknowns are not included, and multiple
         * unknowns *might* be included included when evaluation could result in
         * different unknowns. For example:
         *
         *     (<unknown[1]> || true) && <unknown[2]> -> <unknown[2]>
         *     <unknown[1]> || <unknown[2]> -> <unknown[1,2]>
         *     <unknown[1]>.foo -> <unknown[1]>
         *     foo(<unknown[1]>) -> <unknown[1]>
         *     <unknown[1]> + <unknown[2]> -> <unknown[1]> or <unknown[2[>
         *
         * Unknown takes precidence over Error in cases where a `Value` can short
         * circuit the result:
         *
         *     <error> || <unknown> -> <unknown>
         *     <error> && <unknown> -> <unknown>
         *
         * Errors take precidence in all other cases:
         *
         *     <unknown> + <error> -> <error>
         *     foo(<unknown>, <error>) -> <error>
         *
         * @generated from protobuf field: google.api.expr.v1beta1.UnknownSet unknown = 3;
         */
        unknown: UnknownSet;
    } | {
        oneofKind: undefined;
    };
}
/**
 * A set of errors.
 *
 * The errors included depend on the context. See `ExprValue.error`.
 *
 * @generated from protobuf message google.api.expr.v1beta1.ErrorSet
 */
export interface ErrorSet {
    /**
     * The errors in the set.
     *
     * @generated from protobuf field: repeated google.rpc.Status errors = 1;
     */
    errors: Status[];
}
/**
 * A set of expressions for which the value is unknown.
 *
 * The unknowns included depend on the context. See `ExprValue.unknown`.
 *
 * @generated from protobuf message google.api.expr.v1beta1.UnknownSet
 */
export interface UnknownSet {
    /**
     * The ids of the expressions with unknown values.
     *
     * @generated from protobuf field: repeated google.api.expr.v1beta1.IdRef exprs = 1;
     */
    exprs: IdRef[];
}
/**
 * A reference to an expression id.
 *
 * @generated from protobuf message google.api.expr.v1beta1.IdRef
 */
export interface IdRef {
    /**
     * The expression id.
     *
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
declare class EvalState$Type extends MessageType<EvalState> {
    constructor();
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.EvalState
 */
export declare const EvalState: EvalState$Type;
declare class EvalState_Result$Type extends MessageType<EvalState_Result> {
    constructor();
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.EvalState.Result
 */
export declare const EvalState_Result: EvalState_Result$Type;
declare class ExprValue$Type extends MessageType<ExprValue> {
    constructor();
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.ExprValue
 */
export declare const ExprValue: ExprValue$Type;
declare class ErrorSet$Type extends MessageType<ErrorSet> {
    constructor();
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.ErrorSet
 */
export declare const ErrorSet: ErrorSet$Type;
declare class UnknownSet$Type extends MessageType<UnknownSet> {
    constructor();
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.UnknownSet
 */
export declare const UnknownSet: UnknownSet$Type;
declare class IdRef$Type extends MessageType<IdRef> {
    constructor();
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.IdRef
 */
export declare const IdRef: IdRef$Type;
export {};
